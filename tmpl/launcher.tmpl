#!/bin/bash

<%= "# This is auto generated script by aclii " + aclii.version %>

set -euo pipefail

_aclii_debug () {
  if [ -n "${ACLII_DEBUG+HAS_VALUE}" ]; then
    echo "$@" >> /tmp/aclii-debug.log
  fi
}

_aclii_exec () {
  binname=$(dirname $0)/$(basename $0)"-main"
  exec "$binname" $(echo "$1" | base64)
}


_aclii_debug "Launch aclii..."
_aclii_debug "ARGV $@"
_aclii_debug "$ 0 $0"

##// aclii.allCommands.forEach( c => {
_help_<%= c.hashedPath %> () {
  cat << 'EOH'
##// setIndent(2)
Name: <%= c.path  %>
  <%= c.description %>
<%= aclii.manualForCommand(c.path) %>
Commands:
##//  c.commands.forEach( sc => {
  <%= sc.name %><% if (sc.argv ) { %> <<%= sc.argv %>>...<% } %>
    | <%= sc.description %>
##//  })

Options:
##//  c.options.forEach( o => {
  --<%= o.name %> | <%= o.description %>
##//  })
##// setIndent(0)
EOH
}
##//})

_help () {
  local page
  if [ -n "${1+HAS_VALUE}" ]; then
    page="$1"
  else
    page="<%= aclii.commandName %>"
  fi
  case "$page" in
##// aclii.allCommands.forEach( c => {
    "<%= c.path %>") _help_<%= c.hashedPath %> ;;
##// })
  esac
  exit 0
}

# Flag to enable immediate help / validate error
ACLII_EXEC=1

# parser needs @argv
argv=("$@")

__parse_args () {


##//INCLUDE parser.tmpl

  _aclii_debug  "got cmd: $cmd"
  local json='{"command":"'"$cmd"'","args":[],"options":{}}'
  # Now we got the command which to be executed.
  # Handle it as it wants
  case "$cmd" in
##// aclii.allCommands.forEach( c => {
    "<%= c.path %>" )
##//   if (c.helpstop) {
      _help "$cmd"
##// // TODO: Prepare input for each env. Maybe it could be plaggable?
##//   } else if ( c.script ) {
      tmp=$(mktemp)
      echo '#!/usr/bin/env <%= c.env || "bash" %>' > $tmp
      cat << '__END_OF_ACLII_SCRIPT__' >> $tmp
<%= c.script %>
__END_OF_ACLII_SCRIPT__
      chmod +x $tmp
      result=0
      $tmp || result=$?
      rm $tmp
      if [ ! "$result" == "0" ]; then
        echo "(aclii:: script exited with $result)"
      else
        echo "(aclii:: script done.)"
      fi
      exit $result
##//   } else {
##//     c.inputsWithDefaults.forEach( o => {
      key="<%= o.name %>"
      def="<%= o.defaultValue %>"
      json=$(echo $json | jq --arg key "${key}" --arg val "${def}" '.options[$key] = $val')
##//     })
##//   }
      ;;
##// })
    * )
      echo "Unknown command";
      _help;
  esac


# Build Args
  local i=0
  for value in "${foundValues[@]}"
  do
    local inputId="${foundValuesFor[$i]}"
    local key="${inputKeys[$inputId]}"

    if [ -n "${inputIsMulti[$inputId]}" ] || [ -n "${inputIsMany[$inputId]}" ]; then
      json=$(echo $json | jq --arg key "${key}" --arg val "${value}" 'if .options[$key] then .options[$key] += [$val] else .options[$key] =[$val] end')
    else
      json=$(echo $json | jq --arg key "${key}" --arg val "${value}" '.options[$key] = $val')
    fi
    : $((i++))
  done
  _aclii_debug "got json $json"
  _aclii_exec "$json"
}
__parse_args


