#!/bin/bash

<%= "# This is auto generated script by aclii " + aclii.version %>

set -euo pipefail

_aclii_debug () {
  if [ -n "${ACLII_DEBUG+HAS_VALUE}" ]; then
    echo "$@" >> /tmp/aclii-debug.log
  fi
}

_aclii_exec_json () {
  if [ "${1:0:1}" == "/" ] || [ "${1:0:1}" == "~" ]; then
    binname=$1
  else
    binname="$(dirname "$0")"/"$1"
  fi
  exec "$binname" "$2"
}

_aclii_exec () {
  if [ "${1:0:1}" == "/" ] || [ "${1:0:1}" == "~" ]; then
    binname=$1
  else
    binname="$(dirname "$0")/$1"
  fi
  exec "$binname" "${2[@]}"

}

_aclii_debug "Launch aclii..."
_aclii_debug "ARGV $*"
_aclii_debug "$ 0 $0"

##// aclii.allCommands.forEach( c => {
_help_<%= c.hashedPath %> () {
  cat << 'EOH'
##// setIndent(2)
Name: <%= c.path  %>
  <%= c.description %>
<%= aclii.manualForCommand(c.path) %>
Commands:
##//  c.commands.forEach( sc => {
  <%= sc.name %><% if (sc.argv ) { %> <<%= sc.argv %>>...<% } %>
    | <%= sc.description %>
##//  })

Options:
##//  c.options.forEach( o => {
  --<%= o.name %> | <%= o.description %>
##//  })
##// setIndent(0)
EOH
}
##//})

_help () {
  local page
  if [ -n "${1+HAS_VALUE}" ]; then
    page="$1"
  else
    page="<%= aclii.commandName %>"
  fi
  case "$page" in
##// aclii.allCommands.forEach( c => {
    "<%= c.path %>") _help_<%= c.hashedPath %> ;;
##// })
  esac
  exit 0
}

# parser needs @argv
argv=("$@")

__parse_args () {


##//INCLUDE parser.tmpl

  _aclii_debug "got cmd: $cmd"
  _aclii_debug "error: $error"

  if [ -n "$help" ]; then
    _help "$cmd"
  fi
  if [ -n "$error" ]; then
    echo "Got command line parse error: $error"
    _help
  fi

  # Now we got the command which to be executed.
  # Handle it as it wants


# At first, check if this command wants JSON compiled args.
# Also, handle helpstops here.
  local wantJSON=""
  local bin=""
  local binPath=""
  case "$cmd" in
##// aclii.allCommands.forEach( c => {
    "<%= c.path %>" )
##//   if (c.helpstop) {
      _help "$cmd"
##//   } else if ( aclii.getCommandByPath(c.binPath).argstyle == 'json' ) {
      wantJSON="1"
      bin="""<%= c.bin %>"
      binPath="""<%= c.binPath %>"
##//   }
      ;;
##// })
  esac

  local json
  local jsonb64
# Let's cook JSON
  if [ -n "$wantJSON" ]; then
    json=$(printf '{"command":"%s","bin":"%s","binpath":"%s","options":{}}' $cmd $bin $binPath);

  # Insert Default Values
  case "$cmd" in
##// aclii.allCommands.forEach( c => {
    "<%= c.path %>")
##//   c.inputsWithDefaults.forEach( o => {
      key="<%= o.name %>"
      def="<%= o.defaultValue %>"
      json=$(echo "$json" | jq -c --arg key "${key}" --arg val "${def}" '.options[$key] = $val')
##//     })
      ;;
##//   })
  esac

  # Then, Insert values fetched from argv
    local i=0
    if [ -n "${foundValues+HAS}" ]; then
      for value in "${foundValues[@]}"
      do
        local inputId="${foundValuesFor[i]}"
        local key="${inputKeys[inputId]}"

        if [ -n "${inputIsMulti[inputId]}" ] || [ -n "${inputIsMany[inputId]}" ]; then
          json=$(echo "$json" | jq -c --arg key "${key}" --arg val "${value}" 'if .options[$key] then .options[$key] += [$val] else .options[$key] =[$val] end')
        else
          json=$(echo "$json" | jq -c --arg key "${key}" --arg val "${value}" '.options[$key] = $val')
        fi
        : $((i++))
      done
    fi

    if  [ "$(base64 -w >/dev/null 2>&1)" ]; then
      jsonb64=$(echo "$json" | base64 -w0)
    else
      jsonb64=$(echo "$json" | base64)
    fi
    _aclii_debug "got json $( echo "$json" | jq .)"
  fi

  case "$binPath" in
##// aclii.allCommands.forEach( c => {
    "<%= c.path %>" )

##// // TODO: Prepare input for each env. Maybe it could be plaggable?
##//   if ( c.script ) {
      tmp=$(mktemp)
      echo '#!/usr/bin/env <%= c.env || "bash" %>' > "$tmp"
      cat << '__END_OF_ACLII_SCRIPT__' >> "$tmp"
<%= c.script %>
__END_OF_ACLII_SCRIPT__
      chmod +x "$tmp"
      result=0
##//     if ( aclii.getCommandByPath(c.binPath).argstyle === 'json' ) {
      "$tmp" "${jsonb64}" || result=$?
##//     } else {
      "$tmp" "${argv[@]}" || result=$?
##//     }
      rm "$tmp"
      if [ ! "$result" == "0" ]; then
        echo "(aclii:: script exited with $result)"
      else
        echo "(aclii:: script done.)"
      fi
      exit $result
##//   } else {
##//     if ( aclii.getCommandByPath(c.binPath).argstyle === 'json' ) {
      _aclii_exec_json "$bin" "$jsonb64"
##//     } else {
      _aclii_exec "$bin" "${argv[@]}"
##//     }
##//   }
      ;;
##// })
    * )
      echo "Unknown command";
      _help;
  esac

  _aclii_debug "got json $json"
}
__parse_args


