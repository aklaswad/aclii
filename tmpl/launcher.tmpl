#!/bin/bash

<%= "# This is auto generated script by aclii " + aclii.version %>

set -euo pipefail

_aclii_debug () {
  if [ -n "${ACLII_DEBUG+HAS_VALUE}" ]; then
    echo "$@" >> /tmp/aclii-debug.log
  fi
}

_aclii_exec_json () {
  if [ "${1:0:1}" = "/" ] || [ "${1:0:1}" = "~" ]; then
    binname=$1
  else
    binname="$(dirname "$0")"/"$1"
  fi
  exec "$binname" "$2"
}

_aclii_exec () {
  if [ "${1:0:1}" = "/" ] || [ "${1:0:1}" = "~" ]; then
    binname=$1
  else
    binname="$(dirname "$0")/$1"
  fi
  exec "$binname" "${@:2}"

}

_aclii_debug "Launch aclii..."
_aclii_debug "ARGV $*"
_aclii_debug "$ 0 $0"

##// aclii.allCommands.forEach( c => {
_help_<%= c.id %> () {
  cat << 'EOH'
##// setIndent(2)
Name: <%= c.path  %>

  <%= c.description %>

##// if (aclii.manualForCommand(c.path) ) {
<%= aclii.manualForCommand(c.path) %>


##// }
##// if ( c.wants.length ) {

Usage:
  <%= c.path.replaceAll('.', ' ') %> <%= c.wants.map( w => '<' + (w.type || 'any') + '>' + (w.many ? '...' : '') ).join(' ') %>

Arguments:
##//   c.wants.forEach( w => {
  <%= w.name %><%= (w.type && aclii.typeDef(w.type)) ? ' (' + aclii.typeDef(w.type).description + ')' : '' %>
      <%= w.description %>
##//   })

##// }
##// if ( c.commands.length ) {
Commands:
##//  c.commands.forEach( sc => {
  <%= sc.name %> <%= sc.wants.map( w => '<' + (w.type || 'any') + '>' + (w.many ? '...' : '') ).join(' ') %>
      <%= sc.description %>
##//  })

##// }
Options:
##//  c.options.forEach( o => {
  --<%= o.name %> <%=
  (() => {
    if (!o.input.type || o.input.type === 'switch' ) return ''
    let td = aclii.typeDef(o.input.type);
    return '<' + (
      td ? td.name + (
            td.description ? '(' + td.description + ')' : ''
           )
         : o.input.type
      ) + '>'
  })() %><%= o.input.defaultValue ? ' (default: "' + o.input.defaultValue + '")' : '' %>
      <%= o.description %>
##//  })
##// setIndent(0)
EOH
}
##//})

_help () {
  if [ -n "${1+HAS_VALUE}" ]; then
    local -r path=("$@")
  else
    local -r path=("<%= aclii.commandName %>")
  fi
  local pathLength=${#path[@]}
  local place
  case "${path[0]}" in
##// aclii.traversal({
##//   visit: (c, ctx) => {
##//     setIndent( ctx.depth * 4 )
##//     if ( c.commands.length ) {
    "<%= c.name %>")
      if [ $pathLength -eq <%= ctx.depth + 1 %> ]; then
        _help_<%= c.id %>; exit 0
      fi
##//     } else {
    "<%= c.name %>") _help_<%= c.id %>; exit 0 ;;
##//     }
##//     if ( c.commands.length ) {
      case "${path[<%= ctx.depth + 1 %>]}" in
##//     }
##//   },
##//   leave: (c, ctx) => {
##//     setIndent( ctx.depth * 4 )
##//     if ( c.commands.length ) {
        *) _help_<%= aclii.root.id %>;  exit 0
      esac
      ;;
##//     }
##//   }
##// })
  esac
  _help_<%= aclii.root.id %>
  exit 0
}

##//INCLUDE json_builder.tmpl

# parser needs @argv
argv=("$@")

__parse_args () {


##//INCLUDE parser.tmpl

  _aclii_debug "got cmd: $cmd"
  _aclii_debug "error: $error"

  if [ -n "$help" ]; then
    _help "${commandPath[@]}"
  fi
  if [ -n "$error" ]; then
    echo "Got command line parse error: $error"
    _help
  fi

  # Now we got the command which to be executed.
  # Handle it as it wants


# At first, check if this command wants JSON compiled args.
# Also, handle helpstops here.
  local wantJSON=""
  local bin=""
  local binPath=""
  case "$cmd" in
##// aclii.allCommands.forEach( c => {
    "<%= c.path %>" )
##//   if (c.helpstop) {
      _help "$cmd"
##//   } else {
##//     if ( aclii.getCommandByPath(c.binPath).argstyle == 'json' ) {
      wantJSON="1"
##//     }
      bin="<%= c.bin %>"
      binPath="<%= c.binPath %>"
##//   }
      ;;
##// })
  esac

  local json
  local jsonb64
# Let's cook JSON
  if [ -n "$wantJSON" ]; then
    local IFS_BEFORE_JSON="$IFS"
    IFS=
    printf -v json '{"command":"%s","bin":"%s","binpath":"%s"}' $cmd $bin $binPath;

    local jsonValues=(<%= aclii.inputs.map(i => '""').join(' ')%>)
  # Insert Default Values
    case "$cmd" in
##// aclii.allCommands.forEach( c => {
      "<%= c.path %>")
##//   c.inputsWithDefaults.forEach( o => {
         JSONString "<%= o.defaultValue %>"
         jsonValues[<%= o.inputId %>]=$JSON_STRING_BUFFER
##//     })
      ;;
##//   })
    esac

    # Prepare JSON rep of values fetched from argv
    local option_keys=()
    local i=0
    if [ -n "${foundValues+HAS}" ]; then
      for value in "${foundValues[@]}"
      do
        local inputId="${foundValuesFor[i]}"
        local key="${inputKeys[inputId]}"
        _aclii_debug "inputid $inputId key $key"

        if [ -n "${inputIsMulti[inputId]}" ] || [ -n "${inputIsMany[inputId]}" ]; then

          JSON_loadArray ${jsonValues[inputId]}
          JSON_pushString $value
          jsonValues[inputId]=$JSON_BUFFER
        else
          JSONString $value
          jsonValues[inputId]=$JSON_STRING_BUFFER
        fi
        ((i++))
      done
    fi

    # Then, Insert them to "options" object
    JSON_newObject
    local i=0
    if [ -n "${foundValues+HAS}" ]; then
      for value in "${foundValues[@]}"
      do
        local inputId="${foundValuesFor[i]}"
        local key="${inputKeys[inputId]}"
        JSON_add $key ${jsonValues[inputId]}
        ((i++))
      done
    fi
    local jsonOptions=$JSON_BUFFER
    JSON_BUFFER=$json
    JSON_add "options" $jsonOptions

    if  [ "$(base64 -w >/dev/null 2>&1)" ]; then
      jsonb64=$(printf '%s' $JSON_BUFFER | base64 -w0)
    else
      jsonb64=$(printf '%s' $JSON_BUFFER | base64)
    fi
    _aclii_debug "got json $( printf '%s' $JSON_BUFFER | jq .)"
    IFS="$IFS_BEFORE_JSON"
  fi

  # Finally execute selected command
  case "$binPath" in
##// aclii.allCommands.forEach( c => {
    "<%= c.path %>" )

##// // TODO: Prepare input for each env. Maybe it could be plaggable?
##//   if ( c.script ) {
      tmp=$(mktemp)
      echo '#!/usr/bin/env <%= c.env || "bash" %>' > "$tmp"
      cat << '__END_OF_ACLII_SCRIPT__' >> "$tmp"
<%= c.script %>
__END_OF_ACLII_SCRIPT__
      chmod +x "$tmp"
      result=0
##//     if ( aclii.getCommandByPath(c.binPath).argstyle === 'json' ) {
      "$tmp" "${jsonb64}" || result=$?
##//     } else {
      "$tmp" "${argv[@]}" || result=$?
##//     }
      rm "$tmp"
      if [ ! "$result" = "0" ]; then
        echo "(aclii:: script exited with $result)"
      else
        echo "(aclii:: script done.)"
      fi
      exit $result
##//   } else {
##//     if ( aclii.getCommandByPath(c.binPath).argstyle === 'json' ) {
      _aclii_exec_json "$bin" "$jsonb64"
##//     } else {
      _aclii_exec "$bin" "${argv[@]}"
##//     }
##//   }
      ;;
##// })
    * )
      echo "Unknown command";
      _help;
  esac

  _aclii_debug "got json $json"
}
__parse_args


