#!/bin/bash

_aclii_debug () {
  if [ -n "${ACLII_DEBUG+HAS_VALUE}" ]; then
    echo "$@" >> /tmp/aclii-debug.log
  fi
}

declare -a __aclii_inputChain
declare -a __aclii_inputTypes
declare -a __aclii_inputKeys
declare -a __aclii_inputDefaults
declare -a __aclii_inputIsMany
declare -a __aclii_inputIsMulti

declare -a __aclii_foundValues
declare -a __aclii_foundValuesFor
declare __aclii_error
declare __aclii_cmd
declare __aclii_help

_q () {

  # retval:
  # 0: Success
  # 1: given query is invalid
  # 2: queried input was not found in user input
  # 3: Too many inputs are found for non-multiple input

  local query="${1-''}"
  if [ -z ${query} ]; then
    return 1
  fi
  local noDefault="${2-''}"
  local inputId="-1"
  local idx=0
  local inputKey
  for inputKey in "${__aclii_inputKeys[@]}"
  do
    if [ ${query} = ${inputKey} ]; then
      inputId=$idx
      break
    fi
    : $((idx++))
  done

  if [ "$inputId" = "-1" ]; then
    return 1
  fi

  idx=0
  local valueFor
  local found=0
  for valueFor in "${__aclii_foundValuesFor[@]}"
  do
    if [ "$valueFor" = "$inputId" ]; then
      echo "${__aclii_foundValues[$idx]}"
      : $((found++))
    fi
    : $((idx++))
  done
  if [ "0" == "$found" ]; then
      return 2
  fi
  if [ -z "${__aclii_inputIsMany[inputId]}" ] && [ -z "${__aclii_inputIsMulti[inputId]}" ]; then
    if [ "1" != "$found" ]; then
      return 3
    fi
  fi
  return 0
}

__arg_parse () {
  local argv=("$@")

  __aclii_inputChain=()
  __aclii_inputTypes=()
  __aclii_inputKeys=()
  __aclii_inputDefaults=()
  __aclii_inputIsMany=()
  __aclii_inputIsMulti=()
  __aclii_foundValues=()
  __aclii_foundValuesFor=()
  __aclii_error=""
  __aclii_cmd=""
  __aclii_help=""
  __aclii_binPath=""
  __aclii_isHelpStop=""

##// INCLUDE parser.tmpl

  # Export definition in parser out to global
  __aclii_inputChain=("${inputChain[@]}")
  __aclii_inputTypes=("${inputTypes[@]}")
  __aclii_inputKeys=("${inputKeys[@]}")
  __aclii_inputDefaults=("${inputDefaults[@]}")
  __aclii_inputIsMany=("${inputIsMany[@]}")
  __aclii_inputIsMulti=("${inputIsMulti[@]}")

  __aclii_foundValues=("${foundValues[@]}")
  __aclii_foundValuesFor=("${foundValuesFor[@]}")
  __aclii_error="$error"
  __aclii_cmd="$cmd"
  __aclii_help="$help"

  __aclii_binPath=""
  __aclii_isHelpStop=""

  case "$cmd" in
##// aclii.allCommands.forEach( c => {
    "<%= c.path %>" )
##//   if (c.helpstop) {
      __aclii_isHelpStop="$cmd"
##//   }
      __aclii_binPath="<%= c.binPath %>"
      ;;
##// })
  esac
}

__arg_parse "$@"
