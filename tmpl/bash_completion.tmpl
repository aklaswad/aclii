#
#<%= " This is auto generated script by aclii " + aclii.version %>
#

_aclii_debug () {
  if [ -n "$ACLII_DEBUG" ]; then
    echo "$@" >> /tmp/aclii-debug.log
  fi
}

__<%= aclii.commandName %>_compgen () {
  local list=("aaa" "bbb")
  echo "${list[@]}"
  return 0
}

___<%= aclii.commandName %>_compgen () {
  local words="$@"



  # parser needs @argv.
  # Parse from [1] to [len-1] for detect current subcommand
  # ( [0] always aclii so skip it )
  local argv=(${COMP_WORDS[@]:1:$((${#COMP_WORDS[@]}-1))})

##//INCLUDE parser.tmpl

  local oldifs="$IFS"
  local cur="${COMP_WORDS[COMP_CWORD]}"
  _aclii_debug "enter compwords |${COMP_WORDS[@]}| cur |$cur|"

  COMPREPLY=()

  if [ -n "$wantType" ]; then
      # OK, we already know what we want;
      _aclii_debug "want $want |"
    case "$wantType" in
      "file" ) _filedir ;;
      "dir" ) _filedir -d ;;
      * ) COMPREPLY=() ;;
    esac
  elif [ "${cur:0:1}" == '-' ]; then
    # It starts with dash. Maybe we should show option list
    case "$cmd" in
##//  aclii.allCommands.forEach( c => {
      "<%= c.path %>" )
        _aclii_debug "path: <%= c.path %> cur: $cur |"
        COMPREPLY=( $(compgen -W "<%= c.options.map( o => '--' + o.name ).join(" ") %>" -- "${cur}" )) ;;
##//  })
    esac
  else
    # Or, searching next command
    case "$cmd" in
##//  aclii.allCommands.forEach( c => {
      "<%= c.path %>" )
      COMPREPLY=( $(compgen -W "<%= c.commands.map( c => c.name ).join(" ") %>" -- "${cur}" )) ;;
##//  })
    esac
  fi
  _aclii_debug "---------"

  IFS="$oldifs"
}

if type complete &>/dev/null; then
  _<%= aclii.commandName %>_completion () {
    local words cword
    if type _get_comp_words_by_ref &>/dev/null; then
      _get_comp_words_by_ref -n = -n @ -n : -w words -i cword
    else
      cword="$COMP_CWORD"
      words=("${COMP_WORDS[@]}")
    fi

    local si="$IFS"
    if ! IFS=$'\n' COMPREPLY=($(COMP_CWORD="$cword" \
                           COMP_LINE="$COMP_LINE" \
                           COMP_POINT="$COMP_POINT" \
                           __<%= aclii.commandName %>_compgen -- "${words[@]}" \
                           2>/dev/null)); then
      local ret=$?
      IFS="$si"
      return $ret
    fi
    IFS="$si"
    if type __ltrim_colon_completions &>/dev/null; then
      __ltrim_colon_completions "${words[cword]}"
    fi
  }
  complete -o default -F _<%= aclii.commandName %>_completion <%= aclii.commandName %>
elif type compdef &>/dev/null; then
  _<%= aclii.commandName %>_completion () {
    local si=$IFS
    compadd -- $(COMP_CWORD=$((CURRENT-1)) \
                 COMP_LINE=$BUFFER \
                 COMP_POINT=0 \
                 __<%= aclii.commandName %>_compgen -- "${words[@]}" \
                 2>/dev/null)
    IFS=$si
  }
  compdef _<%= aclii.commandName %>_completion <%= aclii.commandName %>
elif type compctl &>/dev/null; then
  _<%= aclii.commandName %>_completion () {
    local cword line point words si
    read -Ac words
    read -cn cword
    let cword-=1
    read -l line
    read -ln point
    si="$IFS"
    if ! IFS=$'\n' reply=($(COMP_CWORD="$cword" \
                       COMP_LINE="$line" \
                       COMP_POINT="$point" \
                       __<%= aclii.commandName %>_compgen -- "${words[@]}" \
                       2>/dev/null)); then

      local ret=$?
      IFS="$si"
      return $ret
    fi
    IFS="$si"
  }
  compctl -K _<%= aclii.commandName %>_completion <%= aclii.commandName %>
fi
