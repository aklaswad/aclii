#
#<%= " This is auto generated script by aclii " + aclii.version %>
#

_aclii_debug () {
  if [ -n "$ACLII_DEBUG" ]; then
    echo "$@" >> /tmp/aclii-debug.log
  fi
}

__<%= aclii.commandName %>_compgen () {
  ## Fix array index for ZSH
  if [ "$ZSH_NAME" = "zsh" ];then
    setopt localoptions ksharrays
  fi

  local words=("$@")

  local w
  local cnt="0"
  local argv=()
  for w in "${words[@]}"; do
    _aclii_debug "words: $w"
    if [ $cnt -eq $COMP_CWORD ]; then
      break
    fi
    if [ $cnt -ne 0 ]; then
      argv+=("$w")
    fi
    : $((cnt++))
  done
  _aclii_debug "C $COMP_CWORD L $COMP_LINE P $COMP_POINT"
  # parser needs @argv.
  # Parse from [1] to [len-1] for detect current subcommand
  # ( [0] always aclii so skip it )
  local cur="${words[COMP_CWORD]}"

  for w in "${argv[@]}"; do
    _aclii_debug "argv: $w"
  done

  _aclii_debug "cur: $cur"
##//INCLUDE parser.tmpl

  local keyword
  local candidates=()
  local candidatesLong=()
  local wtype
  if [ -n "$wantOptType" ]; then
    wtype=$wantOptType
  elif [ -n "$wantType" ]; then
    wtype=$wantType
  fi
  if [ -n "$wtype" ]; then
      # OK, we already know what we want;
      _aclii_debug "want $want type |$wtype|"
    case "$wtype" in
      "file" ) _filedir; return 0 ;;
      "dir" ) _filedir -d; return 0 ;;
##// aclii.typeDefs.forEach( t => {
      '<%= t.name %>')
        local candidates=( <%= t.prepared.map(n=>`"${n}"`).join(' ') %>)
        compgen -W "${candidates[*]}" -- "$cur"
        return 0
        ;;
##// })
      * ) COMPREPLY=() ;;
    esac
    return
  elif [ "${cur:0:1}" = '-' ]; then
    # It starts with dash. Maybe we should show option list
    case "$cmd" in
##//  aclii.allCommands.forEach( c => {
      '<%= c.path %>' )
        _aclii_debug "path: <%= c.path %> cur: $cur |"
##//    c.options.forEach( o => {
          keyword='--<%= o.name %>'
          if [ ${#cur} -eq 0 ] || [ "$keyword" != "${keyword#$cur}" ]; then
            candidates+=('--<%= o.name %>')
            candidatesLong+=('<%= o.description %>')
          fi
##//    })
          ;;
##//  })
    esac
  else
    # Or, searching next command
    case "$cmd" in
##//  aclii.allCommands.forEach( c => {
      '<%= c.path %>' )
##//    c.commands.forEach( sc => {
        keyword='<%= sc.name %>'
        if [ ${#cur} -eq 0 ] || [ "$keyword" != "${keyword#$cur}" ]; then
          candidates+=('<%= sc.name %>')
          local tab=$'\t'
          candidatesLong+=('<%= sc.description %>')
        fi
##//    })
        ;;
##//  })
    esac
  fi
  _aclii_debug "---------"

  if [ ${#candidates[*]} -eq 1 ]; then
    echo "${candidates[0]}"
  elif [ ${#candidates[*]} -eq 0 ]; then
    echo ''
  else
    local maxlen=0
    for w in "${candidates[@]}"; do
      if [ $maxlen -lt ${#w} ]; then
        maxlen=${#w}
      fi
    done
    local idx=0
    for w in "${candidates[@]}"; do
      local fill=$( seq -s " " 0 $(( maxlen - ${#w} )) | sed 's/[0-9]*//g' )
      _aclii_debug "!$w |$fill|"
      echo "$w $fill(${candidatesLong[idx]})"
      : $(( idx++ ))
    done
  fi
}


if type complete &>/dev/null; then
  _<%= aclii.commandName %>_completion () {
    _aclii_debug "--- complete mode"
    local words cword
    if type _get_comp_words_by_ref &>/dev/null; then
      _get_comp_words_by_ref -n = -n @ -n : -w words -i cword
    else
      cword="$COMP_CWORD"
      words=("${COMP_WORDS[@]}")
    fi

    local si="$IFS"
    if ! IFS=$'\n' COMPREPLY=($(COMP_CWORD="$cword" \
                           COMP_LINE="$COMP_LINE" \
                           COMP_POINT="$COMP_POINT" \
                           __<%= aclii.commandName %>_compgen "${words[@]}" \
                           2>/dev/null)); then
      local ret=$?
      IFS="$si"
      return $ret
    fi
    IFS="$si"
    if type __ltrim_colon_completions &>/dev/null; then
      __ltrim_colon_completions "${words[cword]}"
    fi
  }
  complete -F _<%= aclii.commandName %>_completion <%= aclii.commandName %>
fi
